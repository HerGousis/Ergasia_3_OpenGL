#version 330 core

struct Material
{
	sampler2D container2Texture;
	sampler2D container2Texture1;

	sampler2D container2SpecularTexture;
	float shininess;
	
};

uniform Material material;
struct LightSource
{
    vec3 position;

	vec3 ambientColor;
	vec3 diffuseColor;
	vec3 specularColor;

	float constant;
	float linear;
	float quadratic;
    
//---------------------------------------------------------------------

	vec3 direction1; // only for direcdtional light
	vec3 direction2;
	vec3 direction3;
	vec3 direction4;


	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	
};

uniform LightSource lightSource;

in vec3 normal;
in vec3 fragmentPosition;
in vec2 textureCoordiantes;


uniform vec3 cameraPosition;

uniform float time;
void main()
{
	// ambient
	vec3 ambientColor1 =  lightSource.ambient * texture(material.container2Texture, textureCoordiantes).rgb;
	vec3 ambientColor2 =  lightSource.ambient * texture(material.container2Texture, textureCoordiantes).rgb;
	vec3 ambientColor3 = lightSource.ambient  * texture(material.container2Texture, textureCoordiantes).rgb;
	vec3 ambientColor4 =  lightSource.ambient * texture(material.container2Texture, textureCoordiantes).rgb;
//------------------------------------

	vec3 ambientColor = texture(material.container2Texture, textureCoordiantes).rgb * lightSource.ambientColor;

	
	// diffuse
	vec3 normal = normalize(normal);

	vec3 lightSourceDirection = normalize(lightSource.position - fragmentPosition);

	//vec3 lightSourceDirection = normalize(lightSource.position - fragmentPosition);	// to dianisma toy fvtos 
	vec3 lightSourceDirection1 = normalize(-lightSource.direction1); //	only for direcdtional light
	vec3 lightSourceDirection2 = normalize(-lightSource.direction2);
	vec3 lightSourceDirection3 = normalize(-lightSource.direction3);
	vec3 lightSourceDirection4 = normalize(-lightSource.direction4);

	// A . B = |A| * |B| * cosè ---- |A| and |B| equals 1 if they are unit vectors, which they are.
	float diffuseAngle1 = max(dot(lightSourceDirection1, normal), 0);
	float diffuseAngle2 = max(dot(lightSourceDirection2, normal), 0);
	float diffuseAngle3 = max(dot(lightSourceDirection3, normal), 0);
	float diffuseAngle4 = max(dot(lightSourceDirection4, normal), 0);

	//---------------------------------------
	float diffuseAngle = max(dot(lightSourceDirection, normal), 0);


	vec3 diffuseColor1 = diffuseAngle1 * lightSource.diffuse *texture(material.container2Texture, textureCoordiantes).rgb ;
	vec3 diffuseColor2 = diffuseAngle2 * lightSource.diffuse *texture(material.container2Texture, textureCoordiantes).rgb;
	vec3 diffuseColor3 = diffuseAngle3 * lightSource.diffuse *texture(material.container2Texture, textureCoordiantes).rgb;
	vec3 diffuseColor4 = diffuseAngle4 * lightSource.diffuse *texture(material.container2Texture, textureCoordiantes).rgb;
	//-----------------------

	vec3 diffuseColor = diffuseAngle * lightSource.diffuseColor * texture(material.container2Texture, textureCoordiantes).rgb;





	// specular 
	vec3 reflectedLightDirection1 = reflect(-lightSourceDirection1, normal);
	vec3 reflectedLightDirection2 = reflect(-lightSourceDirection2, normal);
	vec3 reflectedLightDirection3 =  reflect(-lightSourceDirection3, normal);
	vec3 reflectedLightDirection4 = reflect(-lightSourceDirection4, normal);

//-------------------
vec3 reflectedLightDirection = reflect(-lightSourceDirection, normal);
	


	vec3 viewerDirection = normalize(cameraPosition - fragmentPosition);

	float specularAngle1 = pow(max(dot(reflectedLightDirection1, viewerDirection), 0), 32.0);
	float specularAngle2 = pow(max(dot(reflectedLightDirection2, viewerDirection), 0), 32.0);
	float specularAngle3 = pow(max(dot(reflectedLightDirection3, viewerDirection), 0), 32.0);
	float specularAngle4 = pow(max(dot(reflectedLightDirection4, viewerDirection), 0), 32.0);

	//------------------------
		float specularAngle = pow(max(dot(reflectedLightDirection, viewerDirection), 0), material.shininess);


	vec3 specularColor1 = specularAngle1 * lightSource.specular  *texture(material.container2SpecularTexture, textureCoordiantes).rgb;
	vec3 specularColor2 = specularAngle2 * lightSource.specular  *texture(material.container2SpecularTexture, textureCoordiantes).rgb ;
	vec3 specularColor3 = specularAngle3 * lightSource.specular  *texture(material.container2SpecularTexture, textureCoordiantes).rgb;
	vec3 specularColor4 = specularAngle4 * lightSource.specular  *texture(material.container2SpecularTexture, textureCoordiantes).rgb;

//-------------------------------
vec3 specularColor = specularAngle * lightSource.specularColor * texture(material.container2SpecularTexture, textureCoordiantes).rgb;


//-----------------------------------
float distanceFromLightSource = length(lightSource.position - fragmentPosition);
	float attenuation = 1.0 / ( lightSource.constant + lightSource.linear * distanceFromLightSource +
								 lightSource.quadratic * distanceFromLightSource * distanceFromLightSource);

	ambientColor *= attenuation;
	diffuseColor *= attenuation;
	specularColor *= attenuation;


	vec3 color = ambientColor + diffuseColor + specularColor;

	vec3 ambientColor0 = ambientColor1 + ambientColor2 + ambientColor3 + ambientColor4 ;
	vec3 diffuseColor0 = diffuseColor1 + diffuseColor2 + diffuseColor3 + diffuseColor4;
	vec3 specularColor0 = specularColor1 + specularColor2 +specularColor3 + specularColor4 ;

	vec3 fos = ambientColor0 + diffuseColor0+ specularColor0;

	vec2 matrixTexCoords = vec2(textureCoordiantes.y, textureCoordiantes.x + time); 
    
	
	if(textureCoordiantes.y < 0.92 && textureCoordiantes.x  <  0.92 &&textureCoordiantes.y > 0.08 && textureCoordiantes.x  >  0.08 )
        color += texture(material.container2Texture1,  matrixTexCoords).rgb;

	vec3 finalColor = fos + color ;
	



	gl_FragColor = vec4(finalColor, 1.0);
}